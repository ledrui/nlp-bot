"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-dialogs
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const botbuilder_core_1 = require("botbuilder-core");
/**
 * Codes indicating why a waterfall step is being called.
 */
var DialogReason;
(function (DialogReason) {
    /**
     * A dialog is being started through a call to `DialogContext.beginDialog()`.
     */
    DialogReason["beginCalled"] = "beginCalled";
    /**
     * A dialog is being continued through a call to `DialogContext.continueDialog()`.
     */
    DialogReason["continueCalled"] = "continueCalled";
    /**
     * A dialog ended normally through a call to `DialogContext.endDialog()`.
     */
    DialogReason["endCalled"] = "endCalled";
    /**
     * A dialog is ending because its being replaced through a call to `DialogContext.replaceDialog()`.
     */
    DialogReason["replaceCalled"] = "replaceCalled";
    /**
     * A dialog was cancelled as part of a call to `DialogContext.cancelAllDialogs()`.
     */
    DialogReason["cancelCalled"] = "cancelCalled";
    /**
     * A step was advanced through a call to `WaterfallStepContext.next()`.
     */
    DialogReason["nextCalled"] = "nextCalled";
})(DialogReason = exports.DialogReason || (exports.DialogReason = {}));
/**
 * Codes indicating the state of the dialog stack after a call to `DialogContext.continueDialog()`
 * or `DialogContext.beginDialog()`.
 */
var DialogTurnStatus;
(function (DialogTurnStatus) {
    /**
     * Indicates that there is currently nothing on the dialog stack.
     */
    DialogTurnStatus["empty"] = "empty";
    /**
     * Indicates that the dialog on top is waiting for a response from the user.
     */
    DialogTurnStatus["waiting"] = "waiting";
    /**
     * Indicates that the dialog completed successfully, the result is available, and the stack is
     * empty.
     */
    DialogTurnStatus["complete"] = "complete";
    /**
     * Indicates that the dialog was cancelled and the stack is empty.
     */
    DialogTurnStatus["cancelled"] = "cancelled";
})(DialogTurnStatus = exports.DialogTurnStatus || (exports.DialogTurnStatus = {}));
/**
 * Base class for all dialogs.
 */
class Dialog {
    /**
     * Creates a new Dialog instance.
     * @param dialogId Unique ID of the dialog.
     */
    constructor(dialogId) {
        /**
         * The telemetry client for logging events.
         * Default this to the NullTelemetryClient, which does nothing.
         */
        this._telemetryClient = new botbuilder_core_1.NullTelemetryClient();
        this.id = dialogId;
    }
    /**
     * Retrieve the telemetry client for this dialog.
     */
    get telemetryClient() {
        return this._telemetryClient;
    }
    /**
     * Set the telemetry client for this dialog.
     */
    set telemetryClient(client) {
        this._telemetryClient = client ? client : new botbuilder_core_1.NullTelemetryClient();
    }
    /**
     * Called when an instance of the dialog is the active dialog and a new activity is received.
     *
     * @remarks
     * SHOULD be overridden by dialogs that support multi-turn conversations. The default
     * implementation calls `DialogContext.endDialog()`.
     * @param dc The dialog context for the current turn of conversation.
     */
    continueDialog(dc) {
        return __awaiter(this, void 0, void 0, function* () {
            // By default just end the current dialog.
            return dc.endDialog();
        });
    }
    /**
     * Called when an instance of the dialog is being returned to from another dialog.
     *
     * @remarks
     * SHOULD be overridden by multi-turn dialogs that start other dialogs using
     * `DialogContext.beginDialog()` or `DialogContext.prompt()`. The default implementation calls
     * `DialogContext.endDialog()` with any results returned from the ending dialog.
     * @param dc The dialog context for the current turn of conversation.
     * @param reason The reason the dialog is being resumed. This will typically be a value of `DialogReason.endCalled`.
     * @param result (Optional) value returned from the dialog that was called. The type of the value returned is dependant on the dialog that was called.
     */
    resumeDialog(dc, reason, result) {
        return __awaiter(this, void 0, void 0, function* () {
            // By default just end the current dialog and return result to parent.
            return dc.endDialog(result);
        });
    }
    /**
     * Called when the dialog has been requested to re-prompt the user for input.
     *
     * @remarks
     * SHOULD be overridden by multi-turn dialogs that wish to provide custom re-prompt logic. The
     * default implementation performs no action.
     * @param context Context for the current turn of conversation.
     * @param instance The instance of the current dialog.
     */
    repromptDialog(context, instance) {
        return __awaiter(this, void 0, void 0, function* () {
            // No-op by default
        });
    }
    /**
     * Called when the dialog is ending.
     *
     * @remarks
     * SHOULD be overridden by dialogs that wish to perform some logging or cleanup action anytime
     * the dialog ends.
     * @param context Context for the current turn of conversation.
     * @param instance The instance of the current dialog.
     * @param reason The reason the dialog is ending.
     */
    endDialog(context, instance, reason) {
        return __awaiter(this, void 0, void 0, function* () {
            // No-op by default
        });
    }
}
/**
 * Signals the end of a turn by a dialog method or waterfall/sequence step.
 */
Dialog.EndOfTurn = { status: DialogTurnStatus.waiting };
exports.Dialog = Dialog;
//# sourceMappingURL=dialog.js.map