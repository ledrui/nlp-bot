import { RecognizerResult, TurnContext } from 'botbuilder';
/**
 * Description of a LUIS application used for initializing a LuisRecognizer.
 */
export interface LuisApplication {
    /**
     * Your models application Id from LUIS
     */
    applicationId: string;
    /**
     *  (Optional) LUIS endpoint with a default of https://westus.api.cognitive.microsoft.com
     */
    endpoint?: string;
    /**
     * Endpoint key for talking to LUIS
     */
    endpointKey: string;
}
/**
 * Options per LUIS prediction.
 */
export interface LuisPredictionOptions {
    /**
     * (Optional) Bing Spell Check subscription key.
     */
    bingSpellCheckSubscriptionKey?: string;
    /**
     * (Optional) Determine if all intents come back or only the top one.
     */
    includeAllIntents?: boolean;
    /**
     * (Optional) A value indicating whether or not instance data should be included in response.
     */
    includeInstanceData?: boolean;
    /**
     * (Optional) If queries should be logged in LUIS.
     */
    log?: boolean;
    /**
     * (Optional) Whether to spell check query.
     */
    spellCheck?: boolean;
    /**
     * (Optional) Whether to use the staging endpoint.
     */
    staging?: boolean;
    /**
     * (Optional) The time zone offset for resolving datetimes.
     */
    timezoneOffset?: number;
}
/**
 * Recognize intents in a user utterance using a configured LUIS model.
 *
 * @remarks
 * This class is used to recognize intents and extract entities from incoming messages.
 * See this class in action [in this sample application](https://github.com/Microsoft/BotBuilder-Samples/tree/master/samples/javascript_nodejs/12.nlp-with-luis).
 *
 * This component can be used within your bots logic by calling [recognize()](#recognize).
 */
export declare class LuisRecognizer {
    private application;
    private options;
    private includeApiResults;
    private luisClient;
    private cacheKey;
    /**
     * Creates a new LuisRecognizer instance.
     * @param application An object conforming to the [LuisApplication](#luisapplication) definition.
     * @param options (Optional) options object used to control predictions. Should conform to the [LuisPrectionOptions](#luispredictionoptions) definition.
     * @param includeApiResults (Optional) flag that if set to `true` will force the inclusion of LUIS Api call in results returned by [recognize()](#recognize). Defaults to a value of `false`.
     */
    constructor(application: LuisApplication, options?: LuisPredictionOptions, includeApiResults?: boolean);
    /**
     * Returns the name of the top scoring intent from a set of LUIS results.
     * @param results Result set to be searched.
     * @param defaultIntent (Optional) intent name to return should a top intent be found. Defaults to a value of `None`.
     * @param minScore (Optional) minimum score needed for an intent to be considered as a top intent. If all intents in the set are below this threshold then the `defaultIntent` will be returned.  Defaults to a value of `0.0`.
     */
    static topIntent(results: RecognizerResult | undefined, defaultIntent?: string, minScore?: number): string;
    /**
     * Calls LUIS to recognize intents and entities in a users utterance.
     *
     * @remarks
     * Returns a [RecognizerResult](../botbuilder-core/recognizerresult) containing any intents and entities recognized by LUIS.
     *
     * In addition to returning the results from LUIS, [recognize()](#recognize) will also
     * emit a trace activity that contains the LUIS results.
     *
     * Here is an example of recognize being used within a bot's turn handler: to interpret an incoming message:
     *
     * ```javascript
     * async onTurn(context) {
     *     if (turnContext.activity.type === ActivityTypes.Message) {
     *         const results = await luisRecognizer.recognize(turnContext);
     *         const topIntent = LuisRecognizer.topIntent(results);
     *         switch (topIntent) {
     *             case 'MyIntent':
     *                 // ... handle intent ...
     *                 break;
     *             case 'None':
     *                 // ... handle intent ...
     *                 break;
     *         }
     *     }
     * }
     * ```
     * @param context Context for the current turn of conversation with the use.
     */
    recognize(context: TurnContext): Promise<RecognizerResult>;
    private getUserAgent;
    private emitTraceInfo;
    private prepareErrorMessage;
    private normalizeName;
    private getIntents;
    private getEntitiesAndMetadata;
    private getEntityValue;
    private getEntityMetadata;
    private getNormalizedEntityName;
    private populateCompositeEntity;
    /**
     * If a property doesn't exist add it to a new array, otherwise append it to the existing array
     * @param obj Object on which the property is to be set
     * @param key Property Key
     * @param value Property Value
     */
    private addProperty;
    private getSentiment;
}
