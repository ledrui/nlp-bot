"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botframework-config
 */
/**
 * Copyright(c) Microsoft Corporation.All rights reserved.
 * Licensed under the MIT License.
 */
const models_1 = require("./models");
const schema_1 = require("./schema");
/**
 * This is class which allows you to manipulate in memory representations of bot configuration with
 * no nodejs depedencies.
 */
class BotConfigurationBase {
    /**
     * Creates a new BotConfigutationBase instance.
     */
    constructor() {
        this.name = '';
        this.description = '';
        this.services = [];
        this.padlock = '';
        this.version = '2.0';
        // noop
    }
    /**
     * Returns a ConnectedService instance given a JSON based service configuration.
     * @param service JSON based service configuration.
     */
    static serviceFromJSON(service) {
        switch (service.type) {
            case schema_1.ServiceTypes.File:
                return new models_1.FileService(service);
            case schema_1.ServiceTypes.QnA:
                return new models_1.QnaMakerService(service);
            case schema_1.ServiceTypes.Dispatch:
                return new models_1.DispatchService(service);
            case schema_1.ServiceTypes.Bot:
                return new models_1.BotService(service);
            case schema_1.ServiceTypes.Luis:
                return new models_1.LuisService(service);
            case schema_1.ServiceTypes.Endpoint:
                return new models_1.EndpointService(service);
            case schema_1.ServiceTypes.AppInsights:
                return new models_1.AppInsightsService(service);
            case schema_1.ServiceTypes.BlobStorage:
                return new models_1.BlobStorageService(service);
            case schema_1.ServiceTypes.CosmosDB:
                return new models_1.CosmosDbService(service);
            case schema_1.ServiceTypes.Generic:
                return new models_1.GenericService(service);
            default:
                return new models_1.ConnectedService(service);
        }
    }
    /**
     * Returns a new BotConfigurationBase instance given a JSON based configuration.
     * @param source JSON based configuration.
     */
    static fromJSON(source = {}) {
        // tslint:disable-next-line:prefer-const
        const services = (source.services) ? source.services.slice().map(BotConfigurationBase.serviceFromJSON) : [];
        const botConfig = new BotConfigurationBase();
        Object.assign(botConfig, source);
        botConfig.services = services;
        botConfig.migrateData();
        return botConfig;
    }
    /**
     * Returns a JSON based version of the current bot.
     */
    toJSON() {
        const newConfig = {};
        Object.assign(newConfig, this);
        delete newConfig.internal;
        newConfig.services = this.services.slice().map((service) => service.toJSON());
        return newConfig;
    }
    /**
     * Connect a service to the bot file.
     * @param newService Service to add.
     * @returns Assigned ID for the service.
     */
    connectService(newService) {
        const service = BotConfigurationBase.serviceFromJSON(newService);
        // assign a unique id
        let found = false;
        do {
            found = false;
            service.id = Math.floor((Math.random() * 255)).toString();
            for (const existingService of this.services) {
                if (existingService.id === service.id) {
                    found = true;
                    break;
                }
            }
        } while (found);
        this.services.push(service);
        return service.id;
    }
    /**
     * Find service by id.
     * @param id ID of the service to find.
     */
    findService(id) {
        for (const service of this.services) {
            if (service.id === id) {
                return service;
            }
        }
        return null;
    }
    /**
     * Find service by name or id.
     * @param nameOrId Name or ID of the service to find.
     */
    findServiceByNameOrId(nameOrId) {
        for (const service of this.services) {
            if (service.id === nameOrId) {
                return service;
            }
        }
        for (const service of this.services) {
            if (service.name === nameOrId) {
                return service;
            }
        }
        return null;
    }
    /**
     * Remove service by name or id.
     * @param nameOrId Name or ID of the service to remove.
     */
    disconnectServiceByNameOrId(nameOrId) {
        const { services = [] } = this;
        let i = services.length;
        while (i--) {
            const service = services[i];
            if (service.id === nameOrId || service.name === nameOrId) {
                return services.splice(i, 1)[0];
            }
        }
        throw new Error(`a service with id or name of [${nameOrId}] was not found`);
    }
    /**
     * Remove service by id.
     * @param nameOrId ID of the service to remove.
     */
    disconnectService(id) {
        const { services = [] } = this;
        let i = services.length;
        while (i--) {
            const service = services[i];
            if (service.id === id) {
                services.splice(i, 1);
                return;
            }
        }
    }
    /**
     * Migrate old formated data into new format.
     */
    migrateData() {
        for (const service of this.services) {
            switch (service.type) {
                case schema_1.ServiceTypes.Bot:
                    {
                        const botService = service;
                        // old bot service records may not have the appId on the bot, but we probably have it already on an endpoint
                        if (!botService.appId) {
                            for (const s of this.services) {
                                if (s.type === schema_1.ServiceTypes.Endpoint) {
                                    const endpoint = s;
                                    if (endpoint.appId) {
                                        botService.appId = endpoint.appId;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    break;
                default:
                    break;
            }
        }
        // this is now a 2.0 version of the schema
        this.version = '2.0';
    }
}
exports.BotConfigurationBase = BotConfigurationBase;
//# sourceMappingURL=botConfigurationBase.js.map