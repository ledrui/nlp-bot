"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botframework-config
 */
/**
 * Copyright(c) Microsoft Corporation.All rights reserved.
 * Licensed under the MIT License.
 */
const schema_1 = require("../schema");
const connectedService_1 = require("./connectedService");
/**
 * Defines a LUIS service connection.
 */
class LuisService extends connectedService_1.ConnectedService {
    /**
     * Creates a new LuisService instance.
     * @param source (Optional) JSON based service definition.
     * @param type (Optional) type of service being defined.
     */
    constructor(source = {}, serviceType) {
        super(source, serviceType || schema_1.ServiceTypes.Luis);
    }
    // get endpoint for the luis service
    getEndpoint() {
        let reg = this.region.toLowerCase();
        // usgovvirginia is that actual azure region name, but the cognitive service team called their endpoint 'virginia' instead of 'usgovvirginia'
        // We handle both region names as an alias for virginia.api.cognitive.microsoft.us
        if (reg === "virginia" || reg === "usgovvirginia") {
            return `https://virginia.api.cognitive.microsoft.us`;
        }
        // regardless, if it starts with usgov or usdod then it is us TLD (ex: api.cognitive.microsoft.us )
        else if (reg.startsWith("usgov") || reg.startsWith("usdod")) {
            return `https://${this.region}.api.cognitive.microsoft.us`;
        }
        return `https://${this.region}.api.cognitive.microsoft.com`;
    }
    // encrypt keys in service
    encrypt(secret, encryptString) {
        if (this.authoringKey && this.authoringKey.length > 0) {
            this.authoringKey = encryptString(this.authoringKey, secret);
        }
        if (this.subscriptionKey && this.subscriptionKey.length > 0) {
            this.subscriptionKey = encryptString(this.subscriptionKey, secret);
        }
    }
    // decrypt keys in service
    decrypt(secret, decryptString) {
        if (this.authoringKey && this.authoringKey.length > 0) {
            this.authoringKey = decryptString(this.authoringKey, secret);
        }
        if (this.subscriptionKey && this.subscriptionKey.length > 0) {
            this.subscriptionKey = decryptString(this.subscriptionKey, secret);
        }
    }
}
exports.LuisService = LuisService;
//# sourceMappingURL=luisService.js.map